<?xml version="1.0" encoding="UTF-8"?>
<protocol name="wayland">
  <copyright>
    This is an example copyright.
    It contains several lines.
    AS WELL AS ALL CAPS TEXT.
  </copyright>

  <interface name="wl_foo" version="3">
    <description summary="Interface for fooing">
      This is the dedicated interface for doing foos over any
      kind of other foos.
    </description>

    <request name="foo_it">
      <description summary="foo numbers">
        This request will foo a number and a string.
      </description>
      <arg name="number" type="int" summary="the number that will be fooed" />
      <arg name="text" type="string" summary="tha text that will be fooed with the number" />
    </request>

    <request name="create_bar">
      <description summary="create a bar">
        Create a bar which will do its bar job.
      </description>
      <arg name="id" type="new_id" interface="wl_bar" summary="created bar" />
    </request>

    <enum name="cake_kind">
      <description summary="Possible cake kinds">
        List of the possible kind of cake supported by the protocol.
      </description>
      <entry name="basic" value="0" summary="mild cake without much flavor" />
      <entry name="spicy" value="1" summary="spicy cake to brun your tongue" />
      <entry name="fruity" value="2" summary="fruity cake to get vitamins" />
    </enum>

    <event name="cake">
      <description summary="a cake is possible">
        The server advertizes that a kind of cake is available
      </description>
      <arg name="kind" type="uint" enum="wl_foo.cake_kind" summary="name of this kind of cake" />
      <arg name="amount" type="uint" summary="amount available" />
    </event>
  </interface>

  <interface name="wl_bar" version="1">
    <description summary="Interface for bars">
      This interface allows you to bar your foos.
    </description>

    <request name="release" type="destructor">
      <description summary="release this bar">
        Notify the compositor that you have finished using this bar.
      </description>
    </request>
  </interface>

  <!-- mimicking a few interfaces from the wayland protocol to trigger edge cases -->

  <interface name="wl_display" version="1">
    <description summary="core global object">
      This global is special and should only generate code client-side, not server-side.
    </description>
  </interface>

  <interface name="wl_registry" version="1">
    <description summary="global registry object">
      This global is special and should only generate code client-side, not server-side.
    </description>

    <request name="bind">
      <description summary="bind an object to the display">
        This request is a special code-path, as its new-id argument as no target type.
      </description>
      <arg name="name" type="uint" summary="unique numeric name of the object"/>
      <arg name="id" type="new_id" summary="bounded object"/>
    </request>
  </interface>

  <interface name="wl_callback" version="1">
    <description summary="callback object">
      This object has a special behavior regarding its destructor.
    </description>

    <event name="done">
      <description summary="done event">
        This event is actually a destructor, but the protocol XML has no wait of specifying it.
        As such, the scanner should consider wl_callback.done as a special case.
      </description>
      <arg name="callback_data" type="uint" summary="request-specific data for the callback"/>
    </event>
  </interface>


</protocol>
